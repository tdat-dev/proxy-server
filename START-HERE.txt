╔══════════════════════════════════════════════════════════════════════════════╗
║                    TRANSLATION PROXY SERVER PACKAGE                          ║
╚══════════════════════════════════════════════════════════════════════════════╝

🎯 WHAT'S INCLUDED

Two production-ready implementations:

1. EXPRESS SERVER (Node.js)
   ├── server.js          - Main Express server
   ├── package.json       - Dependencies
   ├── .env.example       - Configuration template
   ├── test.js            - Comprehensive test suite
   └── README.md          - Full documentation

2. CLOUDFLARE WORKERS (Serverless)
   ├── worker.js          - Workers implementation
   ├── wrangler.toml      - Workers configuration
   └── CLOUDFLARE.md      - Deployment guide

📦 DEPLOYMENT CONFIGS

   ├── vercel.json        - Vercel deployment
   ├── render.yaml        - Render.com deployment
   └── fly.toml           - Fly.io deployment

📚 DOCUMENTATION

   ├── QUICKSTART.md      - Quick start guide
   ├── README.md          - Express server docs
   └── CLOUDFLARE.md      - Workers deployment

═══════════════════════════════════════════════════════════════════════════════

🚀 QUICK START

METHOD 1: EXPRESS (Recommended for beginners)

  1. Install dependencies:
     cd proxy-server
     npm install

  2. Configure:
     cp .env.example .env
     # Edit .env with your Gemini API key

  3. Run:
     npm start

  4. Test:
     npm test

METHOD 2: CLOUDFLARE WORKERS (Recommended for production)

  1. Install Wrangler:
     npm install -g wrangler

  2. Login:
     wrangler login

  3. Create KV namespace:
     wrangler kv:namespace create "TRANSLATION_CACHE"

  4. Deploy:
     wrangler secret put GOOGLE_API_KEY
     wrangler deploy

═══════════════════════════════════════════════════════════════════════════════

✅ FEATURES

EXPRESS:
  ✓ Rate limiting (60 req/min per IP)
  ✓ In-memory cache with 72h TTL
  ✓ Auto language detection
  ✓ Code block preservation
  ✓ CORS configuration
  ✓ Health check endpoint
  ✓ Comprehensive error handling

CLOUDFLARE WORKERS:
  ✓ All Express features +
  ✓ Edge deployment (global)
  ✓ KV persistent cache
  ✓ ~10ms cold start
  ✓ Auto-scaling
  ✓ 100K free requests/day

═══════════════════════════════════════════════════════════════════════════════

🧪 TEST CASES (Auto-run with `npm test`)

  1. Simple translation (en → vi)
  2. Auto-detect Japanese → English
  3. Code block preservation
  4. Emoji handling
  5. Long paragraph
  6. Same source/target (short-circuit)
  7. Cache hit test
  8. Invalid requests (error handling)

═══════════════════════════════════════════════════════════════════════════════

📊 API CONTRACT

POST /translate

Request:
{
  "text": "Hello world",
  "sourceLang": "auto",     // or: en, vi, ja, ko, zh
  "targetLang": "vi",       // required
  "provider": "gemini"      // required
}

Response:
{
  "translation": "Xin chào thế giới",
  "cached": false,
  "detectedSourceLang": "en"
}

GET /health

Response:
{
  "status": "healthy",
  "uptime": 123.45,
  "cacheSize": 42,
  "timestamp": "2025-10-24T12:00:00.000Z"
}

═══════════════════════════════════════════════════════════════════════════════

🔐 SECURITY

  ✓ API key hidden from clients (environment variable)
  ✓ Rate limiting prevents abuse
  ✓ CORS restricts origins
  ✓ Input validation on all fields
  ✓ Error messages don't leak internals

═══════════════════════════════════════════════════════════════════════════════

💰 COST ESTIMATION

HOSTING:
  • Vercel:     Free tier (100GB bandwidth, 100 serverless hours)
  • Render:     Free tier (750 hours/month)
  • Fly.io:     Free tier (3 shared VMs)
  • Cloudflare: Free tier (100K requests/day)

GEMINI API (as of Oct 2024):
  • Free tier:  15 requests/minute
  • Paid:       $0.00025/1K chars input, $0.00075/1K chars output
  • Example:    10K translations/month = ~$1

TOTAL: $0-5/month for personal/small team use

═══════════════════════════════════════════════════════════════════════════════

🔧 ENVIRONMENT VARIABLES

EXPRESS (.env):
  GOOGLE_API_KEY          - Gemini API key (required)
  PORT                    - Server port (default: 3000)
  GEMINI_MODEL            - Model name (default: gemini-1.5-flash)
  CACHE_TTL_HOURS         - Cache TTL (default: 72)
  RATE_LIMIT_MAX_REQUESTS - Rate limit (default: 60)
  ALLOWED_ORIGINS         - CORS origins (default: *)

WORKERS (wrangler.toml + secrets):
  GOOGLE_API_KEY          - Set via: wrangler secret put
  GEMINI_MODEL            - Set in wrangler.toml
  ALLOWED_ORIGINS         - Set in wrangler.toml

═══════════════════════════════════════════════════════════════════════════════

📖 DOCUMENTATION MAP

New to deployment?           → QUICKSTART.md
Using Express/Node.js?       → README.md
Using Cloudflare Workers?    → CLOUDFLARE.md
Want to test locally?        → npm test
Need API reference?          → README.md (API Reference section)

═══════════════════════════════════════════════════════════════════════════════

🎯 DEPLOYMENT COMPARISON

                    Express         Workers
Setup time          5 min           10 min
Free tier           Platform        100K req/day
Cold start          ~500ms          ~10ms
Cache persistence   No (memory)     Yes (KV)
Auto-scaling        Platform        Built-in
Global edge         No              Yes
Best for            VPS/simple      Production/scale

RECOMMENDATION:
  • Development:  Express (easier setup)
  • Production:   Cloudflare Workers (better performance)

═══════════════════════════════════════════════════════════════════════════════

🔗 UPDATE EXTENSION

After deploying, update your Chrome extension:

1. manifest.json (line 11):
   "host_permissions": ["https://YOUR_DEPLOYMENT_URL/*"]

2. background.js (line 64):
   const response = await fetch('https://YOUR_DEPLOYMENT_URL/translate', {

3. Reload extension in chrome://extensions/

═══════════════════════════════════════════════════════════════════════════════

✨ READY TO DEPLOY!

Choose your preferred method and get started:

  Express:    npm install && npm start
  Workers:    wrangler deploy

Questions? Check the README files or run: npm test

Happy translating! 🌐🚀
